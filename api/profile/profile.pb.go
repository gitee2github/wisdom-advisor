// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.0
// source: profile.proto

package profile

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{0}
}

func (x *Ack) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TracePara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceTime uint64 `protobuf:"varint,1,opt,name=TraceTime,proto3" json:"TraceTime,omitempty"`
	Period    uint32 `protobuf:"varint,2,opt,name=Period,proto3" json:"Period,omitempty"`
}

func (x *TracePara) Reset() {
	*x = TracePara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePara) ProtoMessage() {}

func (x *TracePara) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePara.ProtoReflect.Descriptor instead.
func (*TracePara) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{1}
}

func (x *TracePara) GetTraceTime() uint64 {
	if x != nil {
		return x.TraceTime
	}
	return 0
}

func (x *TracePara) GetPeriod() uint32 {
	if x != nil {
		return x.Period
	}
	return 0
}

type CPUPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName   string     `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	IOCPUlist  string     `protobuf:"bytes,2,opt,name=IOCPUlist,proto3" json:"IOCPUlist,omitempty"`
	NetCPUlist string     `protobuf:"bytes,3,opt,name=NetCPUlist,proto3" json:"NetCPUlist,omitempty"`
	Trace      *TracePara `protobuf:"bytes,4,opt,name=Trace,proto3" json:"Trace,omitempty"`
}

func (x *CPUPartition) Reset() {
	*x = CPUPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUPartition) ProtoMessage() {}

func (x *CPUPartition) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUPartition.ProtoReflect.Descriptor instead.
func (*CPUPartition) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{2}
}

func (x *CPUPartition) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *CPUPartition) GetIOCPUlist() string {
	if x != nil {
		return x.IOCPUlist
	}
	return ""
}

func (x *CPUPartition) GetNetCPUlist() string {
	if x != nil {
		return x.NetCPUlist
	}
	return ""
}

func (x *CPUPartition) GetTrace() *TracePara {
	if x != nil {
		return x.Trace
	}
	return nil
}

type Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start bool `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
}

func (x *Switch) Reset() {
	*x = Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switch) ProtoMessage() {}

func (x *Switch) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switch.ProtoReflect.Descriptor instead.
func (*Switch) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{3}
}

func (x *Switch) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

type BindMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetAwareBind bool `protobuf:"varint,1,opt,name=NetAwareBind,proto3" json:"NetAwareBind,omitempty"`
	CCLBind      bool `protobuf:"varint,2,opt,name=CCLBind,proto3" json:"CCLBind,omitempty"`
	PerCoreBind  bool `protobuf:"varint,3,opt,name=PerCoreBind,proto3" json:"PerCoreBind,omitempty"`
}

func (x *BindMethod) Reset() {
	*x = BindMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindMethod) ProtoMessage() {}

func (x *BindMethod) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindMethod.ProtoReflect.Descriptor instead.
func (*BindMethod) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{4}
}

func (x *BindMethod) GetNetAwareBind() bool {
	if x != nil {
		return x.NetAwareBind
	}
	return false
}

func (x *BindMethod) GetCCLBind() bool {
	if x != nil {
		return x.CCLBind
	}
	return false
}

func (x *BindMethod) GetPerCoreBind() bool {
	if x != nil {
		return x.PerCoreBind
	}
	return false
}

type DetectPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string      `protobuf:"bytes,1,opt,name=TaskName,proto3" json:"TaskName,omitempty"`
	Trace    *TracePara  `protobuf:"bytes,2,opt,name=Trace,proto3" json:"Trace,omitempty"`
	Bind     *BindMethod `protobuf:"bytes,3,opt,name=Bind,proto3" json:"Bind,omitempty"`
}

func (x *DetectPolicy) Reset() {
	*x = DetectPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectPolicy) ProtoMessage() {}

func (x *DetectPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectPolicy.ProtoReflect.Descriptor instead.
func (*DetectPolicy) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{5}
}

func (x *DetectPolicy) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *DetectPolicy) GetTrace() *TracePara {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *DetectPolicy) GetBind() *BindMethod {
	if x != nil {
		return x.Bind
	}
	return nil
}

type UserSetPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bind *BindMethod `protobuf:"bytes,1,opt,name=Bind,proto3" json:"Bind,omitempty"`
}

func (x *UserSetPolicy) Reset() {
	*x = UserSetPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSetPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetPolicy) ProtoMessage() {}

func (x *UserSetPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetPolicy.ProtoReflect.Descriptor instead.
func (*UserSetPolicy) Descriptor() ([]byte, []int) {
	return file_profile_proto_rawDescGZIP(), []int{6}
}

func (x *UserSetPolicy) GetBind() *BindMethod {
	if x != nil {
		return x.Bind
	}
	return nil
}

var File_profile_proto protoreflect.FileDescriptor

var file_profile_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x1d, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x41, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x43,
	0x50, 0x55, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x4f, 0x43, 0x50, 0x55,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x4f, 0x43, 0x50,
	0x55, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x43, 0x50, 0x55, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4e, 0x65, 0x74, 0x43, 0x50,
	0x55, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x52, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22,
	0x1e, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22,
	0x6c, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x4e, 0x65, 0x74, 0x41, 0x77, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x4e, 0x65, 0x74, 0x41, 0x77, 0x61, 0x72, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x43, 0x4c, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x43, 0x43, 0x4c, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x22, 0x7d, 0x0a,
	0x0c, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x52, 0x05, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x22, 0x38, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x0a,
	0x04, 0x42, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x32, 0xf7, 0x01, 0x0a, 0x09, 0x57, 0x69, 0x73, 0x64, 0x6f,
	0x6d, 0x4d, 0x67, 0x72, 0x12, 0x3a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x12,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x43, 0x50, 0x55, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x42, 0x0d, 0x5a, 0x0b, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profile_proto_rawDescOnce sync.Once
	file_profile_proto_rawDescData = file_profile_proto_rawDesc
)

func file_profile_proto_rawDescGZIP() []byte {
	file_profile_proto_rawDescOnce.Do(func() {
		file_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_profile_proto_rawDescData)
	})
	return file_profile_proto_rawDescData
}

var file_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_profile_proto_goTypes = []interface{}{
	(*Ack)(nil),           // 0: profile.Ack
	(*TracePara)(nil),     // 1: profile.TracePara
	(*CPUPartition)(nil),  // 2: profile.CPUPartition
	(*Switch)(nil),        // 3: profile.Switch
	(*BindMethod)(nil),    // 4: profile.BindMethod
	(*DetectPolicy)(nil),  // 5: profile.DetectPolicy
	(*UserSetPolicy)(nil), // 6: profile.UserSetPolicy
}
var file_profile_proto_depIdxs = []int32{
	1, // 0: profile.CPUPartition.Trace:type_name -> profile.TracePara
	1, // 1: profile.DetectPolicy.Trace:type_name -> profile.TracePara
	4, // 2: profile.DetectPolicy.Bind:type_name -> profile.BindMethod
	4, // 3: profile.UserSetPolicy.Bind:type_name -> profile.BindMethod
	6, // 4: profile.WisdomMgr.StartUserSetBind:input_type -> profile.UserSetPolicy
	5, // 5: profile.WisdomMgr.StartAutoThreadAffinityBind:input_type -> profile.DetectPolicy
	2, // 6: profile.WisdomMgr.StartThreadGrouping:input_type -> profile.CPUPartition
	3, // 7: profile.WisdomMgr.SetScan:input_type -> profile.Switch
	0, // 8: profile.WisdomMgr.StartUserSetBind:output_type -> profile.Ack
	0, // 9: profile.WisdomMgr.StartAutoThreadAffinityBind:output_type -> profile.Ack
	0, // 10: profile.WisdomMgr.StartThreadGrouping:output_type -> profile.Ack
	0, // 11: profile.WisdomMgr.SetScan:output_type -> profile.Ack
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_profile_proto_init() }
func file_profile_proto_init() {
	if File_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSetPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profile_proto_goTypes,
		DependencyIndexes: file_profile_proto_depIdxs,
		MessageInfos:      file_profile_proto_msgTypes,
	}.Build()
	File_profile_proto = out.File
	file_profile_proto_rawDesc = nil
	file_profile_proto_goTypes = nil
	file_profile_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WisdomMgrClient is the client API for WisdomMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WisdomMgrClient interface {
	StartUserSetBind(ctx context.Context, in *UserSetPolicy, opts ...grpc.CallOption) (*Ack, error)
	StartAutoThreadAffinityBind(ctx context.Context, in *DetectPolicy, opts ...grpc.CallOption) (*Ack, error)
	StartThreadGrouping(ctx context.Context, in *CPUPartition, opts ...grpc.CallOption) (*Ack, error)
	SetScan(ctx context.Context, in *Switch, opts ...grpc.CallOption) (*Ack, error)
}

type wisdomMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewWisdomMgrClient(cc grpc.ClientConnInterface) WisdomMgrClient {
	return &wisdomMgrClient{cc}
}

func (c *wisdomMgrClient) StartUserSetBind(ctx context.Context, in *UserSetPolicy, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.WisdomMgr/StartUserSetBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wisdomMgrClient) StartAutoThreadAffinityBind(ctx context.Context, in *DetectPolicy, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.WisdomMgr/StartAutoThreadAffinityBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wisdomMgrClient) StartThreadGrouping(ctx context.Context, in *CPUPartition, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.WisdomMgr/StartThreadGrouping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wisdomMgrClient) SetScan(ctx context.Context, in *Switch, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.WisdomMgr/SetScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WisdomMgrServer is the server API for WisdomMgr service.
type WisdomMgrServer interface {
	StartUserSetBind(context.Context, *UserSetPolicy) (*Ack, error)
	StartAutoThreadAffinityBind(context.Context, *DetectPolicy) (*Ack, error)
	StartThreadGrouping(context.Context, *CPUPartition) (*Ack, error)
	SetScan(context.Context, *Switch) (*Ack, error)
}

// UnimplementedWisdomMgrServer can be embedded to have forward compatible implementations.
type UnimplementedWisdomMgrServer struct {
}

func (*UnimplementedWisdomMgrServer) StartUserSetBind(context.Context, *UserSetPolicy) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUserSetBind not implemented")
}
func (*UnimplementedWisdomMgrServer) StartAutoThreadAffinityBind(context.Context, *DetectPolicy) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAutoThreadAffinityBind not implemented")
}
func (*UnimplementedWisdomMgrServer) StartThreadGrouping(context.Context, *CPUPartition) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartThreadGrouping not implemented")
}
func (*UnimplementedWisdomMgrServer) SetScan(context.Context, *Switch) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScan not implemented")
}

func RegisterWisdomMgrServer(s *grpc.Server, srv WisdomMgrServer) {
	s.RegisterService(&_WisdomMgr_serviceDesc, srv)
}

func _WisdomMgr_StartUserSetBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSetPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomMgrServer).StartUserSetBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.WisdomMgr/StartUserSetBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomMgrServer).StartUserSetBind(ctx, req.(*UserSetPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _WisdomMgr_StartAutoThreadAffinityBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomMgrServer).StartAutoThreadAffinityBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.WisdomMgr/StartAutoThreadAffinityBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomMgrServer).StartAutoThreadAffinityBind(ctx, req.(*DetectPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _WisdomMgr_StartThreadGrouping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPUPartition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomMgrServer).StartThreadGrouping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.WisdomMgr/StartThreadGrouping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomMgrServer).StartThreadGrouping(ctx, req.(*CPUPartition))
	}
	return interceptor(ctx, in, info, handler)
}

func _WisdomMgr_SetScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Switch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WisdomMgrServer).SetScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.WisdomMgr/SetScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WisdomMgrServer).SetScan(ctx, req.(*Switch))
	}
	return interceptor(ctx, in, info, handler)
}

var _WisdomMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.WisdomMgr",
	HandlerType: (*WisdomMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartUserSetBind",
			Handler:    _WisdomMgr_StartUserSetBind_Handler,
		},
		{
			MethodName: "StartAutoThreadAffinityBind",
			Handler:    _WisdomMgr_StartAutoThreadAffinityBind_Handler,
		},
		{
			MethodName: "StartThreadGrouping",
			Handler:    _WisdomMgr_StartThreadGrouping_Handler,
		},
		{
			MethodName: "SetScan",
			Handler:    _WisdomMgr_SetScan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}
